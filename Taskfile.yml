version: '3'

vars:
  BINARY_NAME: nimsforestpm
  BUILD_DIR: ./bin
  CMD_DIR: ./cmd
  INTEGRATION_TAG: integration

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  build:
    desc: Build the application
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.CMD_DIR}}
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - go clean

  test:
    desc: Run all unit tests
    cmds:
      - go test ./...

  test-verbose:
    desc: Run all unit tests with verbose output
    cmds:
      - go test -v ./...

  test-integration:
    desc: Run integration tests
    cmds:
      - go test -tags={{.INTEGRATION_TAG}} -v ./integration/...

  test-all:
    desc: Run all tests (unit + integration)
    cmds:
      - task: test
      - task: test-integration

  test-coverage:
    desc: Run tests with coverage report
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  lint:
    desc: Run linting tools
    cmds:
      - go fmt ./...
      - go vet ./...

  tidy:
    desc: Tidy and verify module dependencies
    cmds:
      - go mod tidy
      - go mod verify

  install:
    desc: Install the application
    deps: [build]
    cmds:
      - go install {{.CMD_DIR}}

  dev:
    desc: Run development build and test cycle
    cmds:
      - task: tidy
      - task: lint
      - task: test
      - task: build

  ci:
    desc: Run CI pipeline (lint, test, build)
    cmds:
      - task: tidy
      - task: lint
      - task: test-all
      - task: build

  run:
    desc: Run the application with arguments
    deps: [build]
    cmds:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} {{.CLI_ARGS}}"

  workspace-test:
    desc: Test workspace functionality
    cmds:
      - go test -v ./internal/workspace/...

  runtimetool-test:
    desc: Test runtime tool functionality
    cmds:
      - go test -v ./internal/runtimetool/...

  tool-interface-test:
    desc: Test tool interface functionality
    cmds:
      - go test -v ./pkg/tool/...

  tool-integration-test:
    desc: Run tool interface integration tests
    cmds:
      - go test -tags={{.INTEGRATION_TAG}} -v ./integration/tool_interface_test.go ./integration/common_test.go

  quick-test:
    desc: Run quick tests (unit only, no integration)
    cmds:
      - go test -short ./...

  check:
    desc: Run all checks (lint, test, build)
    cmds:
      - task: lint
      - task: test
      - task: build
      - echo "All checks passed!"

  validate-tool:
    desc: Validate a tool at specified path
    cmds:
      - go run ./cmd validate --tool-path={{.TOOL_PATH}} {{.CLI_ARGS}}

  validate-example:
    desc: Validate the example tool in pkg/tool
    cmds:
      - go test -v ./pkg/tool/ -run TestToolValidation

  build-example:
    desc: Build the example tool for integration testing
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -o {{.BUILD_DIR}}/example-tool ./integration/example-tool
    sources:
      - "integration/example-tool/**/*.go"
      - "pkg/tool/**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/example-tool"

  build-and-test:
    desc: Build binaries and run full integration tests
    deps: [build, build-example]
    cmds:
      - go test -v ./integration

  full-cycle-test:
    desc: Run complete build → install → validate cycle test
    deps: [build, build-example]
    cmds:
      - go test -v ./integration -run TestFullBuildInstallValidateCycle

  example-tool-test:
    desc: Test the example tool binary directly
    deps: [build-example]
    cmds:
      - echo "Testing example tool binary..."
      - "{{.BUILD_DIR}}/example-tool hello"
      - "{{.BUILD_DIR}}/example-tool version"
      - "{{.BUILD_DIR}}/example-tool status"
      - echo "Example tool binary tests passed!"

  stability-test:
    desc: Run all stability and integration tests
    cmds:
      - task: build-and-test
      - task: example-tool-test
      - echo "All stability tests passed!"

  validate-cycle:
    desc: Validate complete build → install → validate cycle
    deps: [build, build-example]
    cmds:
      - go test -v ./integration -run TestPreBuiltBinaryCycle
      - go test -v ./integration -run TestTaskSystemIntegration
      - echo "Complete cycle validation passed!"

  test-binary-install:
    desc: Test the new binary installation functionality
    deps: [build, build-example]
    cmds:
      - echo "=== Testing Binary Installation ==="
      - mkdir -p temp-test-install
      - cd temp-test-install && ../{{.BUILD_DIR}}/nimsforestpm create-organization-workspace test-install
      - echo "=== Installing Example Tool via Binary Install ==="
      - cd temp-test-install/test-install-workspace && ../../{{.BUILD_DIR}}/nimsforestpm install --name example-tool --path ../../{{.BUILD_DIR}}/example-tool
      - echo "=== Checking Status ==="
      - cd temp-test-install/test-install-workspace && ../../{{.BUILD_DIR}}/nimsforestpm status
      - echo "=== Testing Installed Tool ==="
      - cd temp-test-install/test-install-workspace && ./bin/example-tool hello
      - cd temp-test-install/test-install-workspace && ./bin/example-tool version
      - echo "=== Cleaning Up ==="
      - rm -rf temp-test-install
      - echo "✓ Binary installation test passed!"

  test-binary-install-integration:
    desc: Run integration tests for binary installation
    deps: [build, build-example]
    cmds:
      - go test -v ./integration -run TestBinaryInstallation
      - echo "✓ Binary installation integration tests passed!"

  validate-binary:
    desc: Validate a binary tool by path (use BINARY_PATH variable)
    deps: [build]
    cmds:
      - 'test -n "{{.BINARY_PATH}}" || (echo "Error: BINARY_PATH variable required. Usage: task validate-binary BINARY_PATH=./bin/example-tool" && exit 1)'
      - 'echo "=== Validating Binary Tool: {{.BINARY_PATH}} ==="'
      - 'test -f "{{.BINARY_PATH}}" || (echo "❌ Binary not found: {{.BINARY_PATH}}" && exit 1)'
      - 'echo "✓ Binary exists: {{.BINARY_PATH}}"'
      - 'test -x "{{.BINARY_PATH}}" || (echo "❌ Binary is not executable: {{.BINARY_PATH}}" && exit 1)'
      - 'echo "✓ Binary is executable"'
      - 'echo "=== Testing Binary Tool Interface ==="'
      - 'echo "Testing basic functionality..."'
      - '{{.BINARY_PATH}} --help 2>/dev/null || echo "Binary does not support --help flag"'
      - 'echo "Testing version command..."'
      - '{{.BINARY_PATH}} version || echo "Binary does not support version command"'
      - 'echo "✓ Binary tool validation passed!"'

  validate-example-tool:
    desc: Validate the example tool binary
    deps: [build, build-example]
    cmds:
      - task: validate-binary
        vars:
          BINARY_PATH: "{{.BUILD_DIR}}/example-tool"

  validate-full-cycle:
    desc: Test complete cycle including new binary installation
    deps: [build, build-example]
    cmds:
      - task: validate-cycle
      - task: test-binary-install
      - task: test-binary-install-integration
      - task: validate-example-tool
      - echo "✓ Complete validation with binary installation passed!"