version: '3'

vars:
  BINARY_NAME: nimsforestpm
  BUILD_DIR: ./bin
  CMD_DIR: ./cmd
  INTEGRATION_TAG: integration
  EXE_EXT: '{{if eq OS "windows"}}.exe{{end}}'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  build:
    desc: Build the application
    deps: [ensure-build-dir]
    cmds:
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}{{.EXE_EXT}} {{.CMD_DIR}}
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}{{.EXE_EXT}}"

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - go clean

  test:
    desc: Run all unit tests
    cmds:
      - go test ./...

  test-verbose:
    desc: Run all unit tests with verbose output
    cmds:
      - go test -v ./...

  test-integration:
    desc: Run integration tests
    cmds:
      - go test -tags={{.INTEGRATION_TAG}} -v ./integration/...

  test-all:
    desc: Run all tests (unit + integration)
    cmds:
      - task: test
      - task: test-integration

  test-coverage:
    desc: Run tests with coverage report
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  lint:
    desc: Run linting tools
    cmds:
      - go fmt ./...
      - go vet ./...

  tidy:
    desc: Tidy and verify module dependencies
    cmds:
      - go mod tidy
      - go mod verify

  install:
    desc: Install the application
    deps: [build]
    cmds:
      - go install {{.CMD_DIR}}

  dev:
    desc: Run development build and test cycle
    cmds:
      - task: tidy
      - task: lint
      - task: test
      - task: build

  ci:
    desc: Run CI pipeline (lint, test, build)
    cmds:
      - task: tidy
      - task: lint
      - task: test-all
      - task: build

  run:
    desc: Run the application with arguments
    deps: [build]
    cmds:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}{{.EXE_EXT}} {{.CLI_ARGS}}"

  ensure-build-dir:
    desc: Ensure build directory exists (cross-platform)
    cmds:
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BUILD_DIR}}"
        platforms: [windows]
      - cmd: mkdir -p {{.BUILD_DIR}}
        platforms: [linux, darwin]

  ensure-release-dir:
    desc: Ensure release directory exists (cross-platform)
    cmds:
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BUILD_DIR}}/release"
        platforms: [windows]
      - cmd: mkdir -p {{.BUILD_DIR}}/release
        platforms: [linux, darwin]



  quick-test:
    desc: Run quick tests (unit only, no integration)
    cmds:
      - go test -short ./...

  check:
    desc: Run all checks (lint, test, build)
    cmds:
      - task: lint
      - task: test
      - task: build
      - echo "All checks passed!"

  validate-tool:
    desc: Validate a tool at specified path
    cmds:
      - go run ./cmd validate {{.TOOL_PATH}} {{.CLI_ARGS}}

  build-and-test:
    desc: Build binaries and run integration tests
    deps: [build]
    cmds:
      - go test -tags={{.INTEGRATION_TAG}} -v ./integration/...

  stability-test:
    desc: Run all stability and integration tests
    cmds:
      - task: build-and-test
      - echo "All stability tests passed!"

  validate-binary:
    desc: Validate a binary tool by path (use BINARY_PATH variable)
    deps: [build]
    cmds:
      - 'test -n "{{.BINARY_PATH}}" || (echo "Error: BINARY_PATH variable required. Usage: task validate-binary BINARY_PATH=./bin/some-tool" && exit 1)'
      - 'echo "=== Validating Binary Tool: {{.BINARY_PATH}} ==="'
      - 'test -f "{{.BINARY_PATH}}" || (echo "❌ Binary not found: {{.BINARY_PATH}}" && exit 1)'
      - 'echo "✓ Binary exists: {{.BINARY_PATH}}"'
      - 'test -x "{{.BINARY_PATH}}" || (echo "❌ Binary is not executable: {{.BINARY_PATH}}" && exit 1)'
      - 'echo "✓ Binary is executable"'
      - 'echo "=== Testing Binary Tool Interface ==="'
      - 'echo "Testing basic functionality..."'
      - '{{.BINARY_PATH}} --help 2>/dev/null || echo "Binary does not support --help flag"'
      - 'echo "Testing version command..."'
      - '{{.BINARY_PATH}} version || echo "Binary does not support version command"'
      - 'echo "✓ Binary tool validation passed!"'

  build-release:
    desc: Build release binaries for all platforms
    deps: [ensure-release-dir]
    cmds:
      - task: build-linux-amd64
      - task: build-linux-arm64
      - task: build-darwin-amd64
      - task: build-darwin-arm64
      - task: build-windows-amd64
      - echo "All release binaries built in {{.BUILD_DIR}}/release/"

  build-linux-amd64:
    desc: Build Linux AMD64 binary
    cmds:
      - GOOS=linux GOARCH=amd64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}_linux_amd64 {{.CMD_DIR}}

  build-linux-arm64:
    desc: Build Linux ARM64 binary
    cmds:
      - GOOS=linux GOARCH=arm64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}_linux_arm64 {{.CMD_DIR}}

  build-darwin-amd64:
    desc: Build macOS AMD64 binary
    cmds:
      - GOOS=darwin GOARCH=amd64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}_darwin_amd64 {{.CMD_DIR}}

  build-darwin-arm64:
    desc: Build macOS ARM64 binary (Apple Silicon)
    cmds:
      - GOOS=darwin GOARCH=arm64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}_darwin_arm64 {{.CMD_DIR}}

  build-windows-amd64:
    desc: Build Windows AMD64 binary
    cmds:
      - GOOS=windows GOARCH=amd64 go build -o {{.BUILD_DIR}}/release/{{.BINARY_NAME}}_windows_amd64.exe {{.CMD_DIR}}

  release:
    desc: Full release build with checksums
    deps: [build-release]
    cmds:
      - cd {{.BUILD_DIR}}/release && sha256sum * > checksums.txt
      - echo "Release artifacts with checksums created in {{.BUILD_DIR}}/release/"
      - ls -la {{.BUILD_DIR}}/release/